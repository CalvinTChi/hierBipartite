sum(cells_num_missing == 0)
sum(drugs_num_missing <= 1)
length(drugs_num_missing)
# removed 5 out of 504 cell lines
drugSensitivity = drugSensitivity[which(cells_num_missing == 0), ]
dim(drugSensitivity)
drugSensitivity = drugSensitivity[rownames(drugSensitivity) %in% rownames(CCLE), ]
idx = match(rownames(drugSensitivity), rownames(CCLE))
CCLE = CCLE[idx, ]
dim(CCLE)
library(devtools)
install_github("pimentel/scca-bc")
library(devtools)
install_github("pimentel/fscca")
library(fscca)
?fscca
knitr::opts_chunk$set(echo = TRUE)
library(scca)
knitr::opts_chunk$set(echo = TRUE)
library(fscca)
library(openxlsx)
library(dplyr)
library(reshape2)
DIR = 'data/'
load(paste0(DIR, 'CCLE.RData'))
load("data/X2.RData")
load("data/Y2.RData")
load("data/groups2.RData")
names(groups)
X1 = X[groups[["LUNG_1"]], ]
Y1 = Y[groups[["LUNG_1"]], ]
rst = scca(X1, X2, penalty = "LASSO")
rst = scca(X2, Y2, penalty = "LASSO")
rst = scca(X1, Y1, penalty = "LASSO")
system.time(scca(X1, Y1, penalty = "LASSO"))
system.time(fscca(X1, Y1, penalty = "LASSO"))
system.time(fscca(X1, Y1))
system.time(fscca(X1, Y1, penalty_x = "lasso", penalty_y = "lasso"))
system.time(
fscca(X1, Y1, penalty_x = "lasso", penalty_y = "lasso",
lam_x = 3, lam_y = 3)
)
system.time(scca(X1, Y1, penalty = "LASSO"))
system.time(
scca(X1, Y1, penalty = "LASSO", scale = TRUE)
)
system.time(
fscca(X1, Y1, penalty_x = "lasso", penalty_y = "lasso",
lam_x = seq(3), lam_y = seq(3), scale = TRUE)
)
rst = scca(X1, Y1, penalty = "LASSO", scale = TRUE)
rstF = fscca(X1, Y1, penalty_x = "lasso", penalty_y = "lasso",
lam_x = seq(3), lam_y = seq(3), scale = TRUE)
head(rst$A)
head(rstF$A)
?fscca
install_github("pimentel/scca-bc")
library(sccab)
?sccab
library(sccab)
?scca
sccab
?biclusteringPar
?sccab
?features_max_fscca
names(groups)
source("HierBipartite.R")
load("data/X2.RData")
load("data/Y2.RData")
load("data/groups2.RData")
rstSource = HierBipar(X, Y, groups, sampling_times = 1, sampling_ratio = 1)
rstSource = HierBipar(X, Y, groups, sampling_times = 1, sampling_ratio = 1)
source("HierBipartite.R")
rstSource = HierBipar(X, Y, groups, sampling_times = 1, sampling_ratio = 1)
hclustObj = rstSource$hclustObj
# png("pics/dendrogram_yuting.png", res = 300, units = "in", height = 5, width = 7)
par(mar=c(3,4,1,20))
plot(hclustObj, horiz = TRUE)
?fscca
?scca
source("HierBipartite.R")
rstSource = HierBipar(X, Y, groups, sampling_times = 1, sampling_ratio = 1)
hclustObj = rstSource$hclustObj
# png("pics/dendrogram_yuting.png", res = 300, units = "in", height = 5, width = 7)
par(mar=c(3,4,1,20))
plot(hclustObj, horiz = TRUE)
?fscca
source("HierBipartite.R")
rstSource = HierBipar(X, Y, groups, sampling_times = 1, sampling_ratio = 1)
hclustObj = rstSource$hclustObj
# png("pics/dendrogram_yuting.png", res = 300, units = "in", height = 5, width = 7)
par(mar=c(3,4,1,20))
plot(hclustObj, horiz = TRUE)
?features_max_fscca()
?scca
?fscca
?features_max_fscca()
names(groups)
length(groups[["CENTRAL_NERVOUS_SYSTEM"]])
length(groups[["LUNG_1"]])
X1 = X[groups[["LUNG_1"]], ]
Y1 = Y[groups[["LUNG_1"]], ]
knitr::opts_chunk$set(echo = TRUE)
load("data/X2.RData")
load("data/Y2.RData")
load("data/groups2.RData")
?svd
null_distri = function(X1, Y1, X2, Y2, n.perm = 10) {
tvds = vector(length = n.perm)
for (i in seq(n.perm)) {
bootstrapIdx1 = sample(seq(nrow(X1)), size = nrow(X1), replace = TRUE)
bootstrapIdx2 = sample(seq(nrow(X2)), size = nrow(X2), replace = TRUE)
X1.b = X1[bootstrapIdx1, ]
Y1.b = Y1[bootstrapIdx1, ]
X2.b = X2[bootstrapIdx2, ]
Y2.b = Y2[bootstrapIdx2, ]
scca1 = scca(X1.b, Y1.b, penalty = "LASSO")
scca2 = scca(X2.b, Y2.b, penalty = "LASSO")
B1 = c(outer(scca1$A, scca1$B))
B2 = c(outer(scca2$A, scca2$B))
tvds[i] = tvd(B1, B2)
}
return(tvds)
}
load("data/data.RData")
X = lst[["X"]]
Y = lst[["Y"]]
groups = lst[["groups"]]
Xgroup1 = X[c(groups[["OESOPHAGUS"]], groups[["LARGE_INTESTINE"]], groups[["PANCREAS"]], groups[["LUNG_1"]], groups[["LUNG_2"]]), ]
Ygroup1 = Y[c(groups[["OESOPHAGUS"]], groups[["LARGE_INTESTINE"]], groups[["PANCREAS"]], groups[["LUNG_1"]], groups[["LUNG_2"]]), ]
Xgroup2 = X[c(groups[["ENDOMETRIUM"]], groups[["SKIN"]]), ]
Ygroup2 = Y[c(groups[["ENDOMETRIUM"]], groups[["SKIN"]]), ]
graph_g1 = ConstructBipartiteG(Xgroup1, Ygroup1)
source("HierBipartite.R")
graph_g1 = ConstructBipartiteG(Xgroup1, Ygroup1)
graph_g1 = ConstructBipartiteG(Xgroup1, Ygroup1)
graph_g2 = ConstructBipartiteG(Xgroup2, Ygroup2)
graph_g2 = ConstructBipartiteG(Xgroup2, Ygroup2)
tvd_g12 = tvd(graph_g1, graph_
tvds = null_distri(Xgroup1, Ygroup1, Xgroup2, Ygroup2)
null_distri = function(X1, Y1, X2, Y2, n.perm = 10) {
tvds = vector(length = n.perm)
for (i in seq(n.perm)) {
bootstrapIdx1 = sample(seq(nrow(X1)), size = nrow(X1), replace = TRUE)
bootstrapIdx2 = sample(seq(nrow(X2)), size = nrow(X2), replace = TRUE)
X1.b = X1[bootstrapIdx1, ]
Y1.b = Y1[bootstrapIdx1, ]
X2.b = X2[bootstrapIdx2, ]
Y2.b = Y2[bootstrapIdx2, ]
scca1 = scca(X1.b, Y1.b, penalty = "LASSO")
scca2 = scca(X2.b, Y2.b, penalty = "LASSO")
B1 = c(outer(scca1$A, scca1$B))
B2 = c(outer(scca2$A, scca2$B))
tvds[i] = tvd(B1, B2)
}
return(tvds)
}
tvds = null_distri(Xgroup1, Ygroup1, Xgroup2, Ygroup2)
hist(tvds)
tvd_g12
tvd_g12 = tvd(graph_g1, graph_g2)
tvd_g12
hist(tvds)
X1 = X[groups[["LUNG_1"]], ]
Y1 = Y[groups[["LUNG_1"]], ]
X2 = X[groups[["LUNG_2"]], ]
Y2 = Y[groups[["LUNG_2"]], ]
graph1 = ConstructBipartiteG(X1, Y1)
graph1 = ConstructBipartiteG(X1, Y1)
graph2 = ConstructBipartiteG(X2, Y2)
tvd12 = tvd(graph1, graph2)
tvd12
tvds12 = null_distri(X1, Y1, X2, Y2)
hist(tvds12)
tvd12
graph1 = ConstructBipartiteG(X1, Y1)
graph1 = ConstructBipartiteG(X1, Y1)
graph2 = ConstructBipartiteG(X2, Y2)
tvd12 = tvd(graph1, graph2)
graph2 = ConstructBipartiteG(X2, Y2)
tvd12 = tvd(graph1, graph2)
tvd_g12 = tvd(graph_g1, graph_g2)
tvd_g12
hist(tvds_g)
tvds_g = null_distri(Xgroup1, Ygroup1, Xgroup2, Ygroup2)
hist(tvds_g)
tvds_g
tvd_g12
hist(tvds12)
tvd12
null_distri = function(X1, Y1, X2, Y2, n.perm = 50) {
tvds = vector(length = n.perm)
for (i in seq(n.perm)) {
bootstrapIdx1 = sample(seq(nrow(X1)), size = nrow(X1), replace = TRUE)
bootstrapIdx2 = sample(seq(nrow(X2)), size = nrow(X2), replace = TRUE)
X1.b = X1[bootstrapIdx1, ]
Y1.b = Y1[bootstrapIdx1, ]
X2.b = X2[bootstrapIdx2, ]
Y2.b = Y2[bootstrapIdx2, ]
scca1 = scca(X1.b, Y1.b, penalty = "LASSO")
scca2 = scca(X2.b, Y2.b, penalty = "LASSO")
B1 = c(outer(scca1$A, scca1$B))
B2 = c(outer(scca2$A, scca2$B))
tvds[i] = tvd(B1, B2)
}
return(tvds)
}
tvds12 = null_distri(X1, Y1, X2, Y2)
hist(tvds12)
tvd12
p_value(tvd12, tvds12)
null_distri = function(X1, Y1, X2, Y2, n.perm = 10) {
tvds = vector(length = n.perm)
for (i in seq(n.perm)) {
bootstrapIdx1 = sample(seq(nrow(X1)), size = nrow(X1) * 0.8, replace = FALSE)
bootstrapIdx2 = sample(seq(nrow(X2)), size = nrow(X2) * 0.8, replace = FALSE)
X1.b = X1[bootstrapIdx1, ]
Y1.b = Y1[bootstrapIdx1, ]
X2.b = X2[bootstrapIdx2, ]
Y2.b = Y2[bootstrapIdx2, ]
scca1 = scca(X1.b, Y1.b, penalty = "LASSO")
scca2 = scca(X2.b, Y2.b, penalty = "LASSO")
B1 = c(outer(scca1$A, scca1$B))
B2 = c(outer(scca2$A, scca2$B))
tvds[i] = tvd(B1, B2)
}
return(tvds)
}
tvds12 = null_distri(X1, Y1, X2, Y2)
hist(tvds12)
tvd12
p_value(tvd12, tvds12)
null_distri = function(X1, Y1, X2, Y2, n.perm = 50) {
tvds = vector(length = n.perm)
for (i in seq(n.perm)) {
bootstrapIdx1 = sample(seq(nrow(X1)), size = nrow(X1) * 0.8, replace = FALSE)
bootstrapIdx2 = sample(seq(nrow(X2)), size = nrow(X2) * 0.8, replace = FALSE)
X1.b = X1[bootstrapIdx1, ]
Y1.b = Y1[bootstrapIdx1, ]
X2.b = X2[bootstrapIdx2, ]
Y2.b = Y2[bootstrapIdx2, ]
scca1 = scca(X1.b, Y1.b, penalty = "LASSO")
scca2 = scca(X2.b, Y2.b, penalty = "LASSO")
B1 = c(outer(scca1$A, scca1$B))
B2 = c(outer(scca2$A, scca2$B))
tvds[i] = tvd(B1, B2)
}
return(tvds)
}
tvds12 = null_distri(X1, Y1, X2, Y2)
null_distri = function(X1, Y1, X2, Y2, n.perm = 50) {
tvds = vector(length = n.perm)
for (i in seq(n.perm)) {
bootstrapIdx1 = sample(seq(nrow(X1)), size = nrow(X1) * 0.8, replace = FALSE)
bootstrapIdx2 = sample(seq(nrow(X2)), size = nrow(X2) * 0.8, replace = FALSE)
X1.b = X1[bootstrapIdx1, ]
Y1.b = Y1[bootstrapIdx1, ]
X2.b = X2[bootstrapIdx2, ]
Y2.b = Y2[bootstrapIdx2, ]
X1.b = scale(X1.b)
X1.b[is.nan(X1.b)] = 0
Y1.b = scale(Y1.b)
Y1.b[is.nan(Y1.b)] = 0
X2.b = scale(X2.b)
X2.b[is.na(X2.b)] = 0
Y2.b = scale(Y2.b)
Y2.b[is.na(Y2.b)] = 0
scca1 = scca(X1.b, Y1.b, penalty = "LASSO")
scca2 = scca(X2.b, Y2.b, penalty = "LASSO")
B1 = c(outer(scca1$A, scca1$B))
B2 = c(outer(scca2$A, scca2$B))
tvds[i] = tvd(B1, B2)
}
return(tvds)
}
tvd12
tvds12 = null_distri(X1, Y1, X2, Y2)
hist(tvds_g)
hist(tvds12)
tvd12
p_value(tvd12, tvds12)
hist(tvds12)
graph1 = ConstructBipartiteG(X1, Y1)
graph1 = ConstructBipartiteG(X1, Y1)
graph2 = ConstructBipartiteG(X2, Y2)
tvd12 = tvd(graph1, graph2)
tvd12
hist(tvds12)
tvds12
plot(c(graph1))
plot(c(graph2))
X1 = X[groups[["LUNG_1"]], ]
Y1 = Y[groups[["LUNG_1"]], ]
X2 = X[groups[["LUNG_2"]], ]
Y2 = Y[groups[["LUNG_2"]], ]
head(rownames(X1))
head(rownames(Y1))
head(rownames(X2))
head(rownames(Y2))
null_distri = function(X1, Y1, X2, Y2, n.perm = 50) {
tvds = vector(length = n.perm)
for (i in seq(n.perm)) {
bootstrapIdx1 = sample(seq(nrow(X1)), size = nrow(X1) * 0.66, replace = FALSE)
bootstrapIdx2 = sample(seq(nrow(X2)), size = nrow(X2) * 0.66, replace = FALSE)
X1.b = X1[bootstrapIdx1, ]
Y1.b = Y1[bootstrapIdx1, ]
X2.b = X2[bootstrapIdx2, ]
Y2.b = Y2[bootstrapIdx2, ]
X1.b = scale(X1.b)
X1.b[is.nan(X1.b)] = 0
Y1.b = scale(Y1.b)
Y1.b[is.nan(Y1.b)] = 0
X2.b = scale(X2.b)
X2.b[is.na(X2.b)] = 0
Y2.b = scale(Y2.b)
Y2.b[is.na(Y2.b)] = 0
scca1 = scca(X1.b, Y1.b, penalty = "LASSO")
scca2 = scca(X2.b, Y2.b, penalty = "LASSO")
B1 = c(outer(scca1$A, scca1$B))
B2 = c(outer(scca2$A, scca2$B))
tvds[i] = tvd(B1, B2)
}
return(tvds)
}
tvds12 = null_distri(X1, Y1, X2, Y2, n.perm = 10)
hist(tvds12)
tvd12
dim(X1)
save(X, file = "data/X2.RData")
load("data/data.RData")
X = lst[["X"]]
Y = lst[["Y"]]
dim(X)
X[1:5, 1:5]
hist(X[, 1])
hist(X[, 2])
install.packages("XML")
library(scca)
?scca
?sleep
system.time(
30
)
system.time(
Sys.time(10)
)
system.time(
Sys.time(10)
)
system.time(
Sys.time(60)
)
?Sys.time
system.time(
Sys.sleep(10)
)
30123 / 60
502/60
library(hierBipartite)
data(hierBipartite)
data(CCLE)
Y = CCLE[["Y"]]
dim(Y)
hist(c(Y))
head(c(Y), n = 30)
s = function(n) {
return(n^(1/n))
}
curve(s, from = 1, to = 1000, 100)
curve(s, from = 1, to = 10, 10)
cos(pi / 3)
cos(pi / 3\4)
cos(pi / 4)
cos(2 * pi / 3)
cos(pi)
cos(4 * pi / 3)
cos(5 * pi / 3)
cos(5 * pi / 3)
6
cos(6 * pi / 3)
pi
function = sine(n) {
return(sin(n * pi / 9))
}
sine = function(n) {
return(sin(n * pi / 9))
}
sine(seq(18))
max(sine(seq(18)))
sum(sine(seq(18)))
sine = function(n) {
return(sin(n * pi / 7))
}
sine(seq(14))
max(sine(seq(14)))
max(sine(seq(20)))
?curve
curve(exp(-x), -10, 10)
?log
mtcars.pca <- prcomp(mtcars[,c(1:7,10,11)], center = TRUE,scale. = TRUE)
summary(mtcars.pca)
?prcomp
dim(mtcars.pca$rotation)
dim(mtcars)
dim(mtcars[,c(1:7,10,11)])
cor(rep(1, 5), rep(3, 5))
?dist
?dist
library(iClusterPlus)
?iClusterBayes
pwd()
getwd()
setwd("~/Documents/Research/Biomarker/")
library(roxygen2)
document()
setwd("./hierBipartite/")
document()
?document
library(roxygen2)
library("devtools")
document()
remove.packages("hierBipartite")
install("hierBipartite")
getwd()
setwd("..")
install("hierBipartite")
library(hierBipartite)
?hierBipartite
setwd("./hierBipartite/")
document()
setwd("..")
remove.packages("hierBipartite")
install("hierBipartite")
library(hierBipartite)
?hierBipartite
?hierBipartite
remove.packages("hierBipartite")
install("hierBipartite")
getwd()
install("hierBipartite")
setwd("./hierBipartite/")
ls
setwd("~/Documents/Research/Biomarker/hierBipartite/")
getwd()
remove.packages("hierBipartite")
document()
library(scca)
?scca
library(openxlsx)
library(tidyr)
library(dplyr)
DIR = 'data/'
load(paste0(DIR, 'CCLE.RData'))
CCLE = t(CCLE.log2.rpkm.matrix)
ccle_cell_annotation = read.xlsx(paste0(DIR, "NIHMS361223-supplement-4.xlsx"), sheet = 2, startRow = 3)
auc = read.xlsx(paste0(DIR, "NIHMS711523-supplement-4.xlsx"), sheet = 4)
auc = as.data.frame(pivot_wider(auc, names_from = index_cpd, values_from = area_under_sensitivity_curve))
drug_annotation = read.xlsx(paste0(DIR, "NIHMS711523-supplement-4.xlsx"), sheet = 2)
ctrp2_cell_annotation = read.xlsx(paste0(DIR, "NIHMS711523-supplement-4.xlsx"), sheet = 3)
setwd("~/Documents/Research/Biomarker/hierBipartite")
DIR = 'data/'
load(paste0(DIR, 'CCLE.RData'))
CCLE = t(CCLE.log2.rpkm.matrix)
ccle_cell_annotation = read.xlsx(paste0(DIR, "NIHMS361223-supplement-4.xlsx"), sheet = 2, startRow = 3)
auc = read.xlsx(paste0(DIR, "NIHMS711523-supplement-4.xlsx"), sheet = 4)
auc = as.data.frame(pivot_wider(auc, names_from = index_cpd, values_from = area_under_sensitivity_curve))
drug_annotation = read.xlsx(paste0(DIR, "NIHMS711523-supplement-4.xlsx"), sheet = 2)
ctrp2_cell_annotation = read.xlsx(paste0(DIR, "NIHMS711523-supplement-4.xlsx"), sheet = 3)
setwd("~/Documents/Research/Biomarker/hierBipartite")
# Read the data
DIR = 'data/'
load(paste0(DIR, 'CCLE.RData'))
CCLE = t(CCLE.log2.rpkm.matrix)
ccle_cell_annotation = read.xlsx(paste0(DIR, "NIHMS361223-supplement-4.xlsx"), sheet = 2, startRow = 3)
# Read the data
DIR = 'data/'
load(paste0(DIR, 'CCLE.RData'))
CCLE = t(CCLE.log2.rpkm.matrix)
# Read the data
DIR = 'data/'
load(paste0(DIR, 'CCLE.RData'))
CCLE = t(CCLE.log2.rpkm.matrix)
# Read the data
DIR = 'data/'
load(paste0(DIR, 'CCLE.RData'))
dim(CCLE$X)
library(scca)
library(openxlsx)
library(dplyr)
library(reshape2)
DIR = 'data/'
load(paste0(DIR, 'CCLE.RData'))
CCLE = t(CCLE.log2.rpkm.matrix)
dim(CCLE$X)
DIR
getwd()
library(openxlsx)
library(dplyr)
library(reshape2)
DIR = 'data/'
load(paste0(DIR, 'CCLE.RData'))
dim(CCLE$X)
dim(CCLE$Y)
load(paste0(DIR, 'CCLE.RData'))
load(paste0(DIR, 'CCLE.RData'))
DIR = 'data/'
load(paste0(DIR, 'CCLE.RData'))
library(openxlsx)
library(dplyr)
library(reshape2)
load("CCLE.RData")
setwd("~/Documents/Research/Biomarker/hierBipartite")
