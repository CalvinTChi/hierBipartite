remove.packages("hierBipartite")
remove.packages("HierBipartite")
devtools::install("hierBipartite")
devtools::install("hierBipartite")
library(HierBipartite)
remove.packages("hierBipartite")
source("HierBipartite.R")
setwd("~/Documents/Research/Biomarker/HierBipartite")
setwd("~/Documents/Research/Biomarker/HierBipartiteScripts/")
source("HierBipartite.R")
#save(rst, file = "results/subsampling_n_15_nucleus_times100_ratio80_p_value.RData")
load("data/simulation.RData")
X = lst[["X"]]
Y = lst[["Y"]]
groups = lst[["groups"]]
rst = hierBipartite(X, Y, groups, n_subsample = 1, subsampling_ratio = 1,
p.value = TRUE, n_perm = 100, parallel = TRUE)
rst$nodePvals
rstFilter = getSignificantMergedGroups(rst, p = 0.01)
"nodePvals" in names(results)
"nodePvals" in names(rst)
"nodePvals" %in% names(rst)
source("HierBipartite.R")
rstFilter = getSignificantMergedGroups(rst, p = 0.01)
getSignificantMergedGroups
rstFilter = getSignificantMergedGroups(rst, p = 0.01)
source("HierBipartite.R")
rstFilter = getSignificantMergedGroups(rst, p = 0.01)
length(rstFilter$nodeMemberships)
rstFilter$nodePvals
rstFilter$nodeMemberships
plot(rst$hclustObj)
groups = lst[["groups"]]
getwd()
setwd("/Users/calvinchi/Documents/Research/Biomarker/hierBipartite/")
setwd("/Users/calvinchi/Documents/Research/Biomarker/")
devtools::install("hierBipartite")
data(CCLE)
library(HierBipartite)
data(CCLE)
X = lst[["X"]]
Y = lst[["Y"]]
groups = lst[["group"]]
dim(X)
library(hierBipartite)
?CCLE
data(CCLE)
?CCLE
?hierBipartite
?hierBipartite::CCLE
view(CCLE)
?CCLE
??CCLE
remove.packages("hierBipartite")
devtools::install("hierBipartite")
setwd("~/Documents/Research/Biomarker/HierBipartite")
setwd("~/Documents/Research/Biomarker)
setwd("~/Documents/Research/Biomarker")
devtools::install("hierBipartite")
library(hierBipartite)
data(CCLE)
?CCLE
remove.packages("hierBipartite")
devtools::install("hierBipartite")
devtools::install("hierBipartite")
getwd()
devtools::install("hierBipartite")
getwd()
devtools::install("hierBipartite")
devtools::install("hierBipartite")
devtools::install("hierBipartite")
setwd("~/Documents/Research/Biomarker/")
devtools::install("hierBipartite")
library(hierBipartite)
?CCLE
help(CCLE)
remove.packages("hierBipartite")
devtools::install("hierBipartite")
setwd("~/Documents/Research/Biomarker")
devtools::install("hierBipartite")
library(hierBipartite)
help(CCLE)
setwd("~/Documents/Research/Biomarker")
devtools::install("hierBipartite")
library(hierBipartite)
help(CCLE)
data(CCLE)
force(lst)
devtools::document()
setwd("~/Documents/Research/Biomarker/hierBipartite")
devtools::document()
devtools::document()
devtools::install("hierBipartite")
setwd("~/Documents/Research/Biomarker")
devtools::install("hierBipartite")
help(lst)
load("data/data.RData")
setwd("~/Documents/Research/Biomarker/HierBipartite")
setwd("~/Documents/Research/Biomarker/HierBipartiteScripts/")
load("data/data.RData")
CCLE = lst
save(CCLE, file = "~/Documents/Research/Biomarker/hierBipartite/data/CCLE.RData")
setwd("~/Documents/Research/Biomarker")
install.packages("hierBipartite")
install.packages("hierBipartite")
devtools::install("hierBipartite")
library(hierBipartite)
help(CCLE)
data(CCLE)
?lst
remove.packages("hierBipartite")
setwd("~/Documents/Research/Biomarker")
devtools::install("hierBipartite")
setwd("~/Documents/Research/Biomarker")
devtools::install("hierBipartite")
library(hierBipartite)
?CCLE
setwd("~/Documents/Research/Biomarker/hierBipartite/")
devtools::document()
remove.packages("hierBipartite")
setwd("~/Documents/Research/Biomarker")
devtools::install("hierBipartite")
library(hierBipartite)
?CCLE
setwd("~/Documents/Research/Biomarker/HierBipartiteScripts/")
load("data/simulation.RData")
simulation = lst
save(simulation, file = "~/Documents/Research/Biomarker/hierBipartite/data/simulation.RData")
remove.packages("hierBipartite")
setwd("~/Documents/Research/Biomarker")
devtools::install("hierBipartite")
remove.packages("hierBipartite")
devtools::document()
setwd("~/Documents/Research/Biomarker/hierBipartite/")
setwd("~/Documents/Research/Biomarker/hierBipartite/")
devtools::document()
remove.packages("hierBipartite")
devtools::document()
setwd("~/Documents/Research/Biomarker/hierBipartite/")
devtools::document()
devtools::install("hierBipartite")
setwd("~/Documents/Research/Biomarker")
devtools::install("hierBipartite")
library(hierBipartite)
?CCLE
?simulation
library(ggplot2)
?diamonds
load("data/simulation.RData")
X = lst[["X"]]
Y = lst[["Y"]]
X = simulation[["X"]]
Y = simulation[["Y"]]
groups = simulation[["groups"]]
source("HierBipartite.R")
setwd("~/Documents/Research/Biomarker/HierBipartiteScripts")
load("data/simulation.RData")
X = lst[["X"]]
Y = lst[["Y"]]
groups = lst[["groups"]]
rst = hierBipartite(X, Y, groups)
source("HierBipartite.R")
rst = hierBipartite(X, Y, groups)
plot(rst$hclustObj)
rst$nodeGroups
load("data/data.RData")
X = lst[["X"]]
Y = lst[["Y"]]
groups = lst[["groups"]]
rst = hierBipartite(X, Y, groups)
plot(rst$hclustObj)
par(mar=c(3,4,1,20))
plot(hclustObj, horiz = TRUE)
par(mar=c(3,4,1,20))
plot(rst$hclustObj, horiz = TRUE)
rst = hierBipartite(X, Y, groups, parallel = FALSE)
par(mar=c(3,4,1,20))
plot(rst$hclustObj, horiz = TRUE)
rst$nodeGroups
source("HierBipartite.R")
rst = hierBipartite(X, Y, groups, parallel = FALSE)
par(mar=c(3,4,1,20))
plot(rst$hclustObj, horiz = TRUE)
rst$nodeGroups
rst$nodeMemberships[[5]]
rownames(X)[rst$nodeMemberships[[5]]]
remove.packages("hierBipartite")
setwd("~/Documents/Research/Biomarker/")
devtools::install("hierBipartite")
remove.packages("hierBipartite")
setwd("~/Documents/Research/Biomarker/hierBipartite/")
devtools::document()
setwd("~/Documents/Research/Biomarker")
devtools::install("hierBipartite")
library(hierBipartite)
library(hierBipartite)
?CCLE
?simlation
?simulation
?hierBipartite
data(CCLE)
X = CCLE[["X"]]
Y = CCLE[["Y"]]
groups = CCLE[["groups"]]
rst = hierBipartite(X, Y, groups)
par(mar=c(3,4,1,20))
plot(rst$hclustObj, horiz = TRUE)
rst$nodeGroups
getSignificantMergedGroups(rst)
library(dplyr)
browseVignettes("dplyr")
browseVignettes("parallel")
setwd("~/Documents/Research/Biomarker/hierBipartite/")
devtools::build_vignettes()
remove.packages("hierBipartite")
setwd("~/Documents/Research/Biomarker")
devtools::install("hierBipartite")
browseVignettes("hierBipartite")
browseVignettes(hierBipartite)
browseVignettes(hierBipartite)
browseVignettes("hierBipartite")
remove.packages("hierBipartite")
setwd("~/Documents/Research/Biomarker")
devtools::install("hierBipartite", build_vignettes = TRUE)
browseVignettes("hierBipartite")
browseVignettes("hierBipartite")
library(hierBipartite)
?hierBipartite
?CCLE
?simulation
knitr::opts_chunk$set(echo = TRUE)
library(hierBipartite)
data(CCLE)
force(CCLE)
names(CCLE)
# gene expression
X = CCLE[["X"]]
# drug sensitivity
Y = CCLE[["Y"]]
# starting group memberships
groups = CCLE[["groups"]]
groups[["LIVER"]]
library(hierBipartite)
result = hierBipartite(X = X, Y = Y, groups = groups, p.value = TRUE, n_perm = 100, parallel = TRUE)
result = hierBipartite(X = X, Y = Y, groups = groups, p.value = TRUE, n_perm = 100, parallel = TRUE)
library(parallel)
?detectCores
remove.packages("hierBipartite")
devtools::install("hierBipartite")
library(hierBipartite)
library(dplyr)
setwd("~/Documents/Research/Biomarker/")
devtools::document()
setwd("~/Documents/Research/Biomarker/hierBipartite/")
devtools::document()
devtools::document()
remove.packages("hierBipartite")
setwd("~/Documents/Research/Biomarker")
devtools::install("hierBipartite")
library(hierBipartite)
data(CCLE)
# gene expression
X = CCLE[["X"]]
# drug sensitivity
Y = CCLE[["Y"]]
# starting group memberships
groups = CCLE[["groups"]]
# Row indices of samples in X, Y from liver
groups[["LIVER"]]
result = hierBipartite(X = X, Y = Y, groups = groups, p.value = TRUE, n_perm = 100, parallel = TRUE)
result = hierBipartite(X = X, Y = Y, groups = groups, p.value = TRUE, n_perm = 100, parallel = TRUE)
library(parallel)
library(scca)
cl = makeCluster(2)
clusterExport(cl, c("scca::scca"), envir = environment())
clusterExport(cl, c("scca"), envir = environment())
remove.packages("hierBipartite")
setwd("~/Documents/Research/Biomarker/")
getwd()
devtools::install("hierBipartite")
setwd("~/Documents/Research/Biomarker/hierBipartite/")
setwd("~/Documents/Research/Biomarker/")
devtools::install("hierBipartite")
library(hierBipartite)
result = hierBipartite(X = X, Y = Y, groups = groups, p.value = TRUE, n_perm = 100, parallel = TRUE)
result = hierBipartite(X = X, Y = Y, groups = groups, p.value = TRUE, n_perm = 100, parallel = TRUE)
hclustObj = result[["hclustObj"]]
par(mar=c(3,4,1,20))
plot(hclustObj, horiz = TRUE)
par(mar=c(3,4,1,20))
plot(hclustObj, horiz = TRUE)
plot(hclustObj, horiz = TRUE)
par(mar=c(3,4,1,15))
plot(hclustObj, horiz = TRUE)
par(mar=c(3,4,1,40))
plot(hclustObj, horiz = TRUE)
hclustObj = result[["hclustObj"]]
par(mar=c(3,4,1,40))
plot(hclustObj, horiz = TRUE)
par(mar=c(3,4,1,20))
plot(hclustObj, horiz = TRUE)
par(mar=c(3,4,1,20))
plot(hclustObj, horiz = TRUE)
dev.off()
dev.off()
par(mfrow=c(1,1))
plot(hclustObj)
plot(hclustObj)
par(mar=c(3,4,1,20))
plot(hclustObj, horiz = TRUE)
plot(hclustObj, horiz = TRUE)
plot(hclustObj, horiz = TRUE)
par(mar=c(3,4,1,20))
plot(hclustObj, horiz = TRUE)
result[["mergeGroups"]]
result[["nodeGroups"]]
# 1st merge
print(result[["nodeGroups"]][[1]])
# 2nd merge
print(result[["nodeGroups"]][[2]])
# 3rd merge
print(result[["nodeGroups"]][[3]])
# 4th merge
print(result[["nodeGroups"]][[4]])
# 5th merge
print(result[["nodeGroups"]][[5]])
# 1st merge
print(result[["nodeGroups"]][[1]])
# 2nd merge
print(result[["nodeGroups"]][[2]])
# 3rd merge
print(result[["nodeGroups"]][[3]])
# 4th merge
print(result[["nodeGroups"]][[4]])
# 5th merge
print(result[["nodeGroups"]][[5]])
print(result[["nodeGroups"]][[5]])
rowIdx = result[["nodeMembership"]][[4]]
X4 = X[rowIdx, ]
Y4 = Y[rowIdx, ]
head(X4[, 1:5])
dim(X4)
rowIdx = result[["nodeMembership"]][[4]]
rowIdx
names(result[["nodeMembership"]])
knitr::opts_chunk$set(echo = TRUE)
library(hierBipartite)
data(CCLE)
# gene expression
X = CCLE[["X"]]
# drug sensitivity
Y = CCLE[["Y"]]
# starting group memberships
groups = CCLE[["groups"]]
# Row indices of samples in X, Y from liver
groups[["LIVER"]]
result = hierBipartite(X = X, Y = Y, groups = groups, p.value = TRUE, n_perm = 100, parallel = TRUE)
hclustObj = result[["hclustObj"]]
par(mar=c(3,4,1,20))
plot(hclustObj, horiz = TRUE)
# 1st merge
print(result[["nodeGroups"]][[1]])
# 2nd merge
print(result[["nodeGroups"]][[2]])
# 3rd merge
print(result[["nodeGroups"]][[3]])
# 4th merge
print(result[["nodeGroups"]][[4]])
# 5th merge
print(result[["nodeGroups"]][[5]])
rowIdx = result[["nodeMemberships"]][[4]]
X4 = X[rowIdx, ]
Y4 = Y[rowIdx, ]
head(X4[, 1:5])
# 1st merge
print(paste(result[["nodeGroups"]][[1]], result[["nodePvals"]][[1]]))
# 2nd merge
print(paste(result[["nodeGroups"]][[2]], result[["nodePvals"]][[2]]))
# 3rd merge
print(paste(result[["nodeGroups"]][[3]], result[["nodePvals"]][[3]]))
# 4th merge
print(paste(result[["nodeGroups"]][[4]], result[["nodePvals"]][[4]]))
# 5th merge
print(paste(result[["nodeGroups"]][[5]], result[["nodePvals"]][[5]]))
# 1st merge
print(paste(paste(result[["nodeGroups"]][[1]]), result[["nodePvals"]][[1]]))
# 2nd merge
print(paste(result[["nodeGroups"]][[2]], result[["nodePvals"]][[2]]))
# 3rd merge
print(paste(result[["nodeGroups"]][[3]], result[["nodePvals"]][[3]]))
# 4th merge
print(paste(result[["nodeGroups"]][[4]], result[["nodePvals"]][[4]]))
# 5th merge
print(paste(result[["nodeGroups"]][[5]], result[["nodePvals"]][[5]]))
paste(result[["nodeGroups"]][[1]])
class(result[["nodeGroups"]][[1]])
paste0(result[["nodeGroups"]][[1]])
?paste
paste(result[["nodeGroups"]][[1]], sep = " with ")
paste(result[["nodeGroups"]][[1]], sep = " with ", collapse = "")
paste(result[["nodeGroups"]][[1]], collapse = " with ")
print(paste(paste(result[["nodeGroups"]][[1]], collapse = " with "), result[["nodePvals"]][[1]]))
print(paste(paste(result[["nodeGroups"]][[1]], collapse = "  merge with "), "with p-value", result[["nodePvals"]][[1]]))
print(paste(paste(result[["nodeGroups"]][[1]], collapse = " merge with "), "with p-value", result[["nodePvals"]][[1]]))
# 1st merge
print(paste(paste(result[["nodeGroups"]][[1]], collapse = " merge with "), "with p-value", result[["nodePvals"]][[1]]))
# 2nd merge
print(paste(paste(result[["nodeGroups"]][[2]], collapse = " merge with "), "with p-value", result[["nodePvals"]][[2]]))
# 3rd merge
print(paste(paste(result[["nodeGroups"]][[3]], collapse = " merge with "), "with p-value", result[["nodePvals"]][[3]]))
# 4th merge
print(paste(paste(result[["nodeGroups"]][[4]], collapse = " merge with "), "with p-value", result[["nodePvals"]][[4]]))
# 5th merge
print(paste(paste(result[["nodeGroups"]][[5]], collapse = " merge with "), "with p-value", result[["nodePvals"]][[5]]))
plot(result[["nodeSCCA"]][[1]])
scca1 = result[["nodeSCCA"]][[1]]
plot(scca1$A)
plot(scca1$B)
scca1 = result[["nodeSCCA"]][[1]]
plot(scca1$A)
plot(scca1$A, xlab = "gene coefficient index", ylab = "coefficient")
filterResults = getSignificantMergedGroups(results = results, p = 0.05)
filterResults = getSignificantMergedGroups(results = result, p = 0.05)
length(filterResults)
result$nodePvals
filterResults$nodeMemberships
filterResults$nodePvals
a = list(1 = c(1, 2, 3), 4 = c(5, 6, 4))
a = list(1 = c(1, 2, 3), 4 = c(5, 6, 4))
a = list(1 = c(1, 2, 3), 4 = c(5, 6, 4))
a <- list(1 = c(1, 2, 3), 4 = c(5, 6, 4))
a <- list("1" = c(1, 2, 3), "4" = c(5, 6, 4))
a
a[[2]]
a[["4"]]
a[["3"]]
a[["2"]]
toString(4)
getSignificantMergedGroups <- function(results, p = 0.05) {
# filters bipartite hierarchical clustering merged groups by p-value
# Input:
#   results: list of results from bipartite hierarchical clustering
#   p: p-value to filter merged groups by
# Output:
#   retLst; list of results from bipartite hierarchical clustering filtered by p-value
if (!"nodePvals" %in% names(results)) {
print("p-value must be computed first!")
} else {
nodeMemberships <- results[["nodeMemberships"]]
nodeSCCA <- results[["nodeSCCA"]]
nodePvals <- results[["nodePvals"]]
nodeGroups <- results[["nodeGroups"]]
retLst <- list()
nodeMembershipsFiltered <- list()
nodeSCCAFiltered <- list()
nodePvalsFiltered <- list()
nodeGroupsFiltered <- list()
n <- length(nodePvals)
index <- 1
for (i in seq(n)) {
if (nodePvals[i] <= p) {
nodeMembershipsFiltered[[toString(index)]] <- nodeMemberships[[i]]
nodeSCCAFiltered[[toString(index)]] <- nodeSCCA[[i]]
nodePvalsFiltered[[toString(index)]] <- nodePvals[[i]]
nodeGroupsFiltered[[toString(index)]] <- nodeGroups[[i]]
}
index <- index + 1
}
retLst <- list("nodeMemberships" = nodeMembershipsFiltered, "nodeSCCA" = nodeSCCAFiltered,
"nodePvals" = nodePvalsFiltered, "hclustObj" = results[["hclustObj"]], "nodeGroups" = nodeGroupsFiltered)
return(retLst)
}
}
filterResults = getSignificantMergedGroups(results = result, p = 0.05)
filterResults$nodeGroups
filterResults = getSignificantMergedGroups(results = result, p = 0.10)
filterResults$nodeGroups
filterResults$nodeGroups
remove.packages("hierBipartite")
getwd()
setwd("/Users/calvinchi/Documents/Research/Biomarker/hierBipartite/")
setwd("/Users/calvinchi/Documents/Research/Biomarker")
devtools::install("hierBipartite")
remove.packages("hierBipartite")
setwd("/Users/calvinchi/Documents/Research/Biomarker/hierBipartite/")
setwd("/Users/calvinchi/Documents/Research/Biomarker/hierBipartite/")
getwd()
devtools::document()
setwd("/Users/calvinchi/Documents/Research/Biomarker")
devtools::install("hierBipartite")
knit_with_parameters('~/Documents/Research/Biomarker/hierBipartite/vignettes/hierBipartite.Rmd')
remove.packages("hierBipartite")
setwd("/Users/calvinchi/Documents/Research/Biomarker/hierBipartite/")
devtools::document()
setwd("/Users/calvinchi/Documents/Research/Biomarker")
devtools::install("hierBipartite")
library(hierBipartite)
data(CCLE)
# gene expression
X = CCLE[["X"]]
# drug sensitivity
Y = CCLE[["Y"]]
# starting group memberships
groups = CCLE[["groups"]]
# Row indices of samples in X, Y from liver
groups[["LIVER"]]
result = hierBipartite(X = X, Y = Y, groups = groups, p.value = TRUE, n_perm = 100, parallel = FALSE)
result = hierBipartite(X = X, Y = Y, groups = groups, p.value = TRUE, n_perm = 100, parallel = FALSE)
remove.packages("hierBipartite")
setwd("~/Documents/Research/Biomarker/hierBipartite/")
setwd("~/Documents/Research/Biomarker")
devtools::install("hierBipartite")
